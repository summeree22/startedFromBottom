pipeline {
    agent any

    environment {
        BACKEND_IMAGE = "summeree22/sfb-backend"
        FRONTEND_IMAGE = "summeree22/sfb-frontend"
        BACKEND_CONTAINER = "sFb-backend"
        FRONTEND_CONTAINER = "sFb-frontend"
        NETWORK_NAME = "startedfrombottom_sFb-network"
        ENV_FILE = ".env"
    }

    stages {
        stage('Prepare Env') {
            steps {
                withCredentials([file(credentialsId: '811b5c6c-064b-4a7e-896a-f6a5701ee92b', variable: 'ENV_FILE')]) {
                    sh 'cp $ENV_FILE backend/.env'
                }
            }
        }

        stage('Setup Git Safe Directory') {
            steps {
                script {
                    def workspaceDir = pwd()
                    sh "git config --global --add safe.directory ${workspaceDir}"
                }
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Backend') {
                    steps {
                        dir('backend') {
                            sh "docker build -t ${BACKEND_IMAGE} ."
                        }
                    }
                }
                stage('Build Frontend') {
                    steps {
                        dir('frontend') {
                            sh "docker build -t ${FRONTEND_IMAGE} ."
                        }
                    }
                }
            }
        }

        stage('Run Containers for Testing') {
            steps {
                script {
                    // Create network if not exists
                    sh "docker network inspect ${NETWORK_NAME} >/dev/null 2>&1 || docker network create ${NETWORK_NAME}"

                    sh """
                        docker run -d --rm --name ${BACKEND_CONTAINER} \
                        --network ${NETWORK_NAME} \
                        --env-file backend/${ENV_FILE} \
                        -p 8080:8080 \
                        ${BACKEND_IMAGE}
                    """
                }
            }
        }

        stage('Run Backend Tests') {
            steps {
                sh "docker exec ${BACKEND_CONTAINER} chmod +x ./run-test.sh"
                sh "docker exec ${BACKEND_CONTAINER} ./run-test.sh"
            }
        }

        stage('Stop Test Containers') {
            steps {
                sh "docker stop ${BACKEND_CONTAINER} || true"
            }
        }

        stage('Push Docker Images to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh """
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        docker push ${BACKEND_IMAGE}
                        docker push ${FRONTEND_IMAGE}
                    """
                }
            }
        }

        stage('Deploy Final Containers') {
            steps {
                sh """
                    docker stop ${BACKEND_CONTAINER} || true
                    docker rm ${BACKEND_CONTAINER} || true
                    docker stop ${FRONTEND_CONTAINER} || true
                    docker rm ${FRONTEND_CONTAINER} || true

                    docker run -d --name ${BACKEND_CONTAINER} \
                    --network ${NETWORK_NAME} \
                    --env-file backend/${ENV_FILE} \
                    -p 8080:8080 \
                    ${BACKEND_IMAGE}

                    docker run -d --name ${FRONTEND_CONTAINER} \
                    --network ${NETWORK_NAME} \
                    -p 3000:3000 \
                    ${FRONTEND_IMAGE}
                """
            }
        }
    }
}
